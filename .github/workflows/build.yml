name: Build and Upload Executable

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    environment: executable

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Export environment variables
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          echo "SUPABASE_URL=${SUPABASE_URL}" > .env
          echo "SUPABASE_KEY=${SUPABASE_KEY}" >> .env

      - name: Validate environment variables
        run: |
          echo "Checking .env contents:"
          cat .env
          echo "Checking SUPABASE_URL:"
          grep "SUPABASE_URL" .env || (echo "SUPABASE_URL not found" && exit 1)
          echo "Checking SUPABASE_KEY:"
          grep "SUPABASE_KEY" .env || (echo "SUPABASE_KEY not found" && exit 1)

      - name: Build Executable for Linux
        run: |
          pyinstaller --noconfirm anylabeling.spec

      - name: Upload Linux executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-executable
          path: dist/

  build-macos:
    runs-on: macos-latest
    environment: executable
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.12.7"
          miniconda-version: "latest"

      - name: Install main
        shell: bash -l {0}
        run: |
          pip install .

      - name: Install PyQt5 for macOS
        shell: bash -l {0}
        run: |
          conda install -c conda-forge pyqt==5.15.7

      - name: Export environment variables
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          echo "SUPABASE_URL=$SUPABASE_URL" >> $GITHUB_ENV
          echo "SUPABASE_KEY=$SUPABASE_KEY" >> $GITHUB_ENV

      - name: Validate environment variables
        run: |
          echo "Checking .env contents:"
          cat .env
          echo "Checking SUPABASE_URL:"
          grep "SUPABASE_URL" .env || (echo "SUPABASE_URL not found" && exit 1)
          echo "Checking SUPABASE_KEY:"
          grep "SUPABASE_KEY" .env || (echo "SUPABASE_KEY not found" && exit 1)

      - name: Build Executable for macOS
        run: |
          pyinstaller --noconfirm anylabeling.spec

      - name: Create dmg for macOS
        run: |
          npm install -g create-dmg
          cd dist
          create-dmg AnyLabeling.app || test -f AnyLabeling\ 0.0.0.dmg
          mv AnyLabeling\ 0.0.0.dmg AnyLabeling.dmg

      - name: Upload release app on macOS
        id: upload_release_app_macos
        uses: actions/upload-artifact@v3
        with:
          name: macos-executable
          path: dist/AnyLabeling.dmg

  build-windows:
    runs-on: windows-latest
    environment: executable

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.12.7"
          miniconda-version: "latest"

      - name: Install main
        shell: bash -l {0}
        run: |
          pip install .

      - name: Export environment variables
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          echo "SUPABASE_URL=$SUPABASE_URL" >> $GITHUB_ENV
          echo "SUPABASE_KEY=$SUPABASE_KEY" >> $GITHUB_ENV

      - name: Validate environment variables
        run: |
          echo "Checking .env contents:"
          cat .env
          echo "Checking SUPABASE_URL:"
          grep "SUPABASE_URL" .env || (echo "SUPABASE_URL not found" && exit 1)
          echo "Checking SUPABASE_KEY:"
          grep "SUPABASE_KEY" .env || (echo "SUPABASE_KEY not found" && exit 1)

      - name: Build Executable for Windows
        run: |
          pyinstaller --noconfirm anylabeling.spec

      - name: Upload Windows executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-executable
