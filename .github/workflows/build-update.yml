name: New Release

on:
  push:
    branches:
      - SyrineAI

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        device: [CPU] # or [CPU, GPU]

    runs-on: ${{ matrix.os }}
    environment: executable

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.10.14"
          miniconda-version: "latest"

      - name: Set preferred device
        shell: bash -l {0}
        run: >-
          sed -i'' -e 's/\_\_preferred_device\_\_[ ]*=[ ]*\"[A-Za-z0-9]*\"/__preferred_device__ = "${{ matrix.device }}"/g' anylabeling/app_info.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install requests

      - name: Install PyQt5 for macOS
        shell: bash -l {0}
        run: |
          conda install -c conda-forge pyqt==5.15.7
        if: runner.os == 'macOS'

      - name: Export environment variables
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          echo "SUPABASE_URL=${SUPABASE_URL}" > .env
          echo "SUPABASE_KEY=${SUPABASE_KEY}" >> .env

      - name: Validate environment variables
        run: |
          echo "Checking .env contents:"
          cat .env
          echo "Checking SUPABASE_URL:"
          grep "SUPABASE_URL" .env || (echo "SUPABASE_URL not found" && exit 1)
          echo "Checking SUPABASE_KEY:"
          grep "SUPABASE_KEY" .env || (echo "SUPABASE_KEY not found" && exit 1)

      - name: Run pyinstaller
        shell: bash -l {0}
        run: |
          pip install pyinstaller
          pyinstaller --noconfirm anylabeling.spec

      - name: Upload Windows executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-executable
          path: dist/anylabeling.exe
        if: runner.os == 'Windows'

      - name: Upload Linux executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux-executable
          path: dist/
        if: runner.os == 'Linux'

      - name: Create dmg for macOS
        run: |
          npm install -g create-dmg
          cd dist
          create-dmg AnyLabeling.app || test -f AnyLabeling\ 0.0.0.dmg
          mv AnyLabeling\ 0.0.0.dmg AnyLabeling${{ matrix.device == 'GPU' && '-GPU' || '' }}.dmg
          echo "Created dmg for macOS"
          pwd
          cd ..
        if: runner.os == 'macOS'

      - name: Upload release app on macOS
        id: upload_release_app_macos
        uses: actions/upload-artifact@v4
        with:
          name: macos-executable
          path: /dist/AnyLabeling${{ matrix.device == 'GPU' && '-GPU' || '' }}.dmg
        if: runner.os == 'macOS'
